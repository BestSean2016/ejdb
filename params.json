{"name":"Ejdb","tagline":"EJDB - Embedded JSON Database engine","body":"\r\n\r\nEJDB - Embedded JSON Database engine\r\n====================================\r\n\r\nIt aims to be a fast [MongoDB](http://mongodb.org)-like library **which can be embedded into C/C++ applications under terms of LGPL license.**\r\n\r\nEJDB is the C library based on modified version of [Tokyo Cabinet](http://fallabs.com/tokyocabinet/).\r\n\r\nJSON representation of queries and data implemented with API based on [C BSON](https://github.com/mongodb/mongo-c-driver/tree/master/src/)\r\n\r\nFeatures\r\n================================\r\n* LGPL license allows you to embed this library into proprietary software.\r\n* MongoDB-like queries and overall philosophy.\r\n* Collection level write locking.\r\n* Collection level transactions.\r\n* String token matching queries: ```$stror``` ```$strand```\r\n* [Node.js](http://nodejs.org) binding\r\n\r\n\r\nDocumentation\r\n================================\r\n\r\n* **[NodeJS binding](#nodejs-binding)**\r\n    * [Installation](#installation)\r\n    * [NodeJS API](#ejdb-nodejs-api)\r\n* **[EJDB C Library](#ejdb-c-library)**\r\n    * [Building & Installation](#building--installation)\r\n    * [C API](#c-api)\r\n\r\n\r\nNodeJS binding\r\n=================================\r\n\r\nOne snippet intro\r\n---------------------------------\r\n```JavaScript\r\nvar EJDB = require(\"ejdb\");\r\n//Open zoo DB\r\nvar jb = EJDB.open(\"zoo\", EJDB.DEFAULT_OPEN_MODE | EJDB.JBOTRUNC);\r\n\r\nvar parrot1 = {\r\n    \"name\" : \"Grenny\",\r\n    \"type\" : \"African Grey\",\r\n    \"male\" : true,\r\n    \"age\" : 1,\r\n    \"birthdate\" : new Date(),\r\n    \"likes\" : [\"green color\", \"night\", \"toys\"],\r\n    \"extra1\" : null\r\n};\r\nvar parrot2 = {\r\n    \"name\" : \"Bounty\",\r\n    \"type\" : \"Cockatoo\",\r\n    \"male\" : false,\r\n    \"age\" : 15,\r\n    \"birthdate\" : new Date(),\r\n    \"likes\" : [\"sugar cane\"]\r\n};\r\n\r\njb.save(\"parrots\", [parrot1, parrot2], function(err, oids) {\r\n    if (err) {\r\n        console.error(err);\r\n        return;\r\n    }\r\n    console.log(\"Grenny OID: \" + parrot1[\"_id\"]);\r\n    console.log(\"Bounty OID: \" + parrot2[\"_id\"]);\r\n\r\n    jb.find(\"parrots\",\r\n            {\"likes\" : \"toys\"},\r\n            {\"$orderby\" : {\"name\" : 1}},\r\n            function(err, cursor, count) {\r\n                if (err) {\r\n                    console.error(err);\r\n                    return;\r\n                }\r\n                console.log(\"Found \" + count + \" parrots\");\r\n                while (cursor.next()) {\r\n                    console.log(cursor.field(\"name\") + \" likes toys!\");\r\n                }\r\n                cursor.close(); //It's not mandatory to close cursor explicitly\r\n                jb.close(); //Close the database\r\n            });\r\n});\r\n```\r\n\r\nInstallation\r\n--------------------------------\r\n**System libraries:**\r\n\r\n* g++\r\n* cunit\r\n* zlib\r\n\r\nOn Debian/Ubuntu linux you can install it as follows:\r\n\r\n```sh\r\n   sudo apt-get install g++ libcunit1 libcunit1-dev zlib1g zlib1g-dev\r\n```\r\n\r\n**Installation from node package manager:**\r\n\r\n    npm install ejdb\r\n\r\n\r\nEJDB NodeJS API\r\n----------------------------------\r\n\r\n<a name=\"open\" />\r\n### EJDB.open(dbFile, openMode)\r\n\r\nOpen database. Return database instance handle object.\r\n<br/>Default open mode: `JBOWRITER | JBOCREAT`.\r\n<br/>This is blocking function.\r\n\r\n__Arguments__\r\n\r\n * {String} dbFile Database main file name\r\n * {Number} `[openMode=JBOWRITER | JBOCREAT]` Bitmast of open modes:\r\n       - `JBOREADER` Open as a reader.\r\n       - `JBOWRITER` Open as a writer.\r\n       - `JBOCREAT` Create if db file not exists\r\n       - `JBOTRUNC` Truncate db.\r\n\r\n---------------------------------------\r\n\r\n<a name=\"close\" />\r\n### close()\r\n\r\nClose database.\r\n<br/>If database was not opened it does nothing.\r\n<br/>This is blocking function.\r\n\r\n---------------------------------------\r\n\r\n<a name=\"isOpen\"/>\r\n### isOpen()\r\nCheck if database in opened state.\r\n\r\n---------------------------------------\r\n\r\n<a name=\"ensureCollection\"/>\r\n### ensureCollection(cname, copts)\r\n\r\nAutomatically creates new collection if it does't exists.\r\nCollection options `copts` applied only for newly created collection.\r\nFor existing collections `copts` takes no effect.\r\n<br/>This is blocking function.\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection.\r\n * {Object} `[copts]` Collection options.\r\n\r\n---------------------------------------\r\n\r\n\r\n<a name=\"removeCollection\"/>\r\n### removeCollection(cname, prune, cb)\r\n\r\nRemove collection.\r\n\r\nCall variations:\r\n\r\n    removeCollection(cname)\r\n    removeCollection(cname, cb)\r\n    removeCollection(cname, prune, cb)\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection.\r\n * {Boolean} `[prune=false]` If true the collection data will erased from disk.\r\n * {Function} `[cb]` Callback args: (error)\r\n\r\n---------------------------------------\r\n\r\n<a name=\"save\"/>\r\n### save(cname, jsarr, cb)\r\n\r\nSave/update specified JSON objects in the collection.\r\nIf collection with `cname` does not exists it will be created.\r\n\r\nEach persistent object has unique identifier (OID) placed in the `_id` property.\r\nIf a saved object does not have  `_id` it will be autogenerated.\r\nTo identify and update object it should contains `_id` property.\r\n\r\nCall variations:\r\n\r\n    save(cname, json object, [cb])\r\n    save(cname, <Array of json objects>, [cb])\r\n\r\n__Arguments__\r\n\r\n * {String} **cname** Name of collection.\r\n * {Array|Object} jsarr Signle JSON object or array of JSON objects to save\r\n * {Function} `[cb]` Callback args: (error, {Array} of OIDs for saved objects)\r\n\r\n\r\n--------------------------------------\r\n\r\n<a name=\"load\"/>\r\n### load(cname, oid, cb)\r\n\r\nLoads JSON object identified by OID from the collection.\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection\r\n * {String} oid Object identifier (OID)\r\n * {Function} cb  Callback args: (error, obj)\r\n        `obj`:  Retrieved JSON object or NULL if it is not found.\r\n\r\n--------------------------------------\r\n\r\n<a name=\"remove\"/>\r\n### remove(cname, oid, cb)\r\n\r\nRemoves JSON object from the collection.\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection\r\n * {String} oid Object identifier (OID)\r\n * {Function} cb  Callback args: (error)\r\n\r\n\r\n--------------------------------------\r\n\r\n<a name=\"find\"/>\r\n### find(cname, qobj, orarr, hints, cb)\r\nExecute query on collection.\r\nEJDB queries inspired by MongoDB (mongodb.org) and follows same philosophy.\r\n\r\n    Supported queries:\r\n      - Simple matching of String OR Number OR Array value:\r\n          -   {'json.field.path' : 'val', ...}\r\n      - $not Negate operation.\r\n          -   {'json.field.path' : {'$not' : val}} //Field not equal to val\r\n          -   {'json.field.path' : {'$not' : {'$begin' : prefix}}} //Field not begins with val\r\n      - $begin String starts with prefix\r\n          -   {'json.field.path' : {'$begin' : prefix}}\r\n      - $gt, $gte (>, >=) and $lt, $lte for number types:\r\n          -   {'json.field.path' : {'$gt' : number}, ...}\r\n      - $bt Between for number types:\r\n          -   {'json.field.path' : {'$bt' : [num1, num2]}}\r\n      - $in String OR Number OR Array val matches to value in specified array:\r\n          -   {'json.field.path' : {'$in' : [val1, val2, val3]}}\r\n      - $nin - Not IN\r\n      - $strand String tokens OR String array val matches all tokens in specified array:\r\n          -   {'json.field.path' : {'$strand' : [val1, val2, val3]}}\r\n      - $stror String tokens OR String array val matches any token in specified array:\r\n          -   {'json.field.path' : {'$stror' : [val1, val2, val3]}}\r\n      - $exists Field existence matching:\r\n          -   {'json.field.path' : {'$exists' : true|false}}\r\n\r\n    NOTE: Negate operations: $not and $nin not using indexes\r\n          so they can be slow in comparison to other matching operations.\r\n\r\n    NOTE: Only one index can be used in search query operation.\r\n\r\n    QUERY HINTS (specified by `hints` argument):\r\n      - $max Maximum number in the result set\r\n      - $skip Number of skipped results in the result set\r\n      - $orderby Sorting order of query fields.\r\n          Eg: ORDER BY field1 ASC, field2 DESC\r\n          hints:    {\r\n                      \"$orderby\" : {\r\n                          \"field1\" : 1,\r\n                          \"field2\" : -1\r\n                      }\r\n                    }\r\n\r\n    Many C API query examples can be found in `tcejdb/testejdb/t2.c` test case.\r\n\r\n    To traverse selected records cursor object is used:\r\n      - Cursor#next() Move cursor to the next record and returns true if next record exists.\r\n      - Cursor#hasNext() Returns true if cursor can be placed to the next record.\r\n      - Cursor#field(name) Retrieve value of the specified field of the current JSON object record.\r\n      - Cursor#object() Retrieve whole JSON object with all fields.\r\n      - Cursor#reset() Reset cursor to its initial state.\r\n      - Cursor#length Read-only property: Number of records placed into cursor.\r\n      - Cursor#pos Read/Write property: You can set cursor position: 0 <= pos < length\r\n      - Cursor#close() Closes cursor and free cursor resources. Cursor cant be used in closed state.\r\n\r\n    Call variations of find():\r\n       - find(cname, qobj, cb)\r\n       - find(cname, qobj, hints, cb)\r\n       - find(cname, qobj, qobjarr, cb)\r\n       - find(cname, qobj, qobjarr, hints, cb)\r\n\r\n __Arguments__\r\n\r\n * {String} cname Name of collection\r\n * {Object} qobj Main JSON query object\r\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\r\n * {Object} `[hints]` JSON object with query hints.\r\n * {Function} cb Callback args: (error, cursor, count)\r\n            `cursor`: Cursor object to traverse records\r\n            `count`:  Total number of selected records\r\n\r\n --------------------------------------------\r\n\r\n<a name=\"findOne\"/>\r\n### findOne(cname, qobj, orarr, hints, cb)\r\nSame as #find() but retrieves only one matching JSON object.\r\n\r\nCall variations of findOne():\r\n\r\n    findOne(cname, qobj, cb)\r\n    findOne(cname, qobj, hints, cb)\r\n    findOne(cname, qobj, qobjarr, cb)\r\n    findOne(cname, qobj, qobjarr, hints, cb)\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection\r\n * {Object} qobj Main JSON query object\r\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\r\n * {Object} `[hints]` JSON object with query hints.\r\n * {Function} cb Callback args: (error, obj)\r\n             `obj`  Retrieved JSON object or NULL if it is not found.\r\n\r\n-----------------------------------\r\n\r\n<a name=\"count\"/>\r\n### count(cname, qobj, orarr, hints, cb)\r\nConvenient count(*) operation.\r\n\r\nCall variations of count():\r\n\r\n    count(cname, qobj, cb)\r\n    count(cname, qobj, hints, cb)\r\n    count(cname, qobj, qobjarr, cb)\r\n    count(cname, qobj, qobjarr, hints, cb)\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection\r\n * {Object} qobj Main JSON query object\r\n * {Array} `[orarr]` Array of additional OR query objects (joined with OR predicate).\r\n * {Object} `[hints]` JSON object with query hints.\r\n * {Function} cb Callback args: (error, count)\r\n              `count`:  Number of matching records.\r\n\r\n-----------------------------------\r\n\r\n<a name=\"sync\"/>\r\n### sync(cb)\r\nSynchronize entire EJDB database with disk.\r\n\r\n__Arguments__\r\n\r\n * {Function} cb Callback args: (error)\r\n\r\n-----------------------------------\r\n\r\n<a name=\"dropIndexes\"/>\r\n### dropIndexes(cname, path, cb)\r\nDrop indexes of all types for JSON field path.\r\n\r\n__Arguments__\r\n\r\n * {String} cname Name of collection\r\n * {String} path  JSON field path\r\n * {Function} `[cb]` Optional callback function. Callback args: (error)\r\n\r\n------------------------------------\r\n\r\n<a name=\"optimizeIndexes\"/>\r\n### optimizeIndexes(cname, path, cb)\r\nOptimize indexes of all types for JSON field path.\r\nPerforms B+ tree index file optimization.\r\n\r\n __Arguments__\r\n\r\n  * {String} cname Name of collection\r\n  * {String} path  JSON field path\r\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\r\n\r\n-----------------------------------\r\n\r\n<a name=\"ensureIndex\"/>\r\n### ensureStringIndex(cname, path, cb)\r\n### ensureNumberIndex(cname, path, cb)\r\n### ensureArrayIndex(cname, path, cb)\r\n\r\nEnsure index presence of String|Number|Array type for JSON field path\r\n\r\n __Arguments__\r\n\r\n  * {String} cname Name of collection\r\n  * {String} path  JSON field path\r\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\r\n\r\n-----------------------------------\r\n\r\n<a name=\"rebuildIndex\"/>\r\n### rebuildStringIndex(cname, path, cb)\r\n### rebuildNumberIndex(cname, path, cb)\r\n### rebuildArrayIndex(cname, path, cb)\r\n\r\nRebuild index of String|Number|Array type for JSON field path\r\n\r\n __Arguments__\r\n\r\n  * {String} cname Name of collection\r\n  * {String} path  JSON field path\r\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\r\n\r\n-----------------------------------\r\n\r\n<a name=\"dropIndex\"/>\r\n### dropStringIndex(cname, path, cb)\r\n### dropNumberIndex(cname, path, cb)\r\n### dropArrayIndex(cname, path, cb)\r\n\r\nDrop index of String|Number|Array type for JSON field path\r\n\r\n __Arguments__\r\n\r\n  * {String} cname Name of collection\r\n  * {String} path  JSON field path\r\n  * {Function} `[cb]` Optional callback function. Callback args: (error)\r\n\r\n-----------------------------------\r\n\r\n\r\nEJDB C Library\r\n==================================\r\n\r\nOne snippet intro\r\n-----------------------------------\r\n\r\n```C\r\n#include <tcejdb/ejdb.h>\r\n\r\nstatic EJDB *jb;\r\n\r\nint main() {\r\n    jb = ejdbnew();\r\n    if (!ejdbopen(jb, \"addressbook\", JBOWRITER | JBOCREAT | JBOTRUNC)) {\r\n        return 1;\r\n    }\r\n    //Get or create collection 'contacts'\r\n    EJCOLL *coll = ejdbcreatecoll(jb, \"contacts\", NULL);\r\n\r\n    bson bsrec;\r\n    bson_oid_t oid;\r\n\r\n    //Insert one record:\r\n    //JSON: {'name' : 'Bruce', 'phone' : '333-222-333', 'age' : 58}\r\n    bson_init(&bsrec);\r\n    bson_append_string(&bsrec, \"name\", \"Bruce\");\r\n    bson_append_string(&bsrec, \"phone\", \"333-222-333\");\r\n    bson_append_int(&bsrec, \"age\", 58);\r\n    bson_finish(&bsrec);\r\n    //Save BSON\r\n    ejdbsavebson(coll, &bsrec, &oid);\r\n    fprintf(stderr, \"\\nSaved Bruce\");\r\n    bson_destroy(&bsrec);\r\n\r\n    //Now execute query\r\n    //QUERY: {'name' : {'$begin' : 'Bru'}} //Name starts with 'Bru' string\r\n    bson bq1;\r\n    bson_init_as_query(&bq1);\r\n    bson_append_start_object(&bq1, \"name\");\r\n    bson_append_string(&bq1, \"$begin\", \"Bru\");\r\n    bson_append_finish_object(&bq1);\r\n    bson_finish(&bq1);\r\n\r\n    EJQ *q1 = ejdbcreatequery(jb, &bq1, NULL, 0, NULL);\r\n\r\n    uint32_t count;\r\n    TCLIST *res = ejdbqrysearch(coll, q1, &count, 0, NULL);\r\n    fprintf(stderr, \"\\n\\nRecords found: %d\\n\", count);\r\n\r\n    //Now print the result set records\r\n    for (int i = 0; i < TCLISTNUM(res); ++i) {\r\n        void *bsdata = TCLISTVALPTR(res, i);\r\n        bson_print_raw(stderr, bsdata, 0);\r\n    }\r\n    fprintf(stderr, \"\\n\");\r\n\r\n    //Dispose result set\r\n    tclistdel(res);\r\n\r\n    //Dispose query\r\n    ejdbquerydel(q1);\r\n    bson_destroy(&bq1);\r\n\r\n    //Close database\r\n    ejdbclose(jb);\r\n    ejdbdel(jb);\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\nBuilding & Installation\r\n--------------------------------\r\n\r\nPrerequisites\r\n--------------------------------\r\n**System libraries:**\r\n\r\n* gcc\r\n* cunit\r\n* zlib\r\n\r\nOn Debian/Ubuntu linux you can install it as follows:\r\n\r\n```sh\r\n   sudo apt-get install gcc libcunit1 libcunit1-dev zlib1g zlib1g-dev\r\n```\r\n\r\nBuilding\r\n--------------------------------\r\n```sh\r\n   cd ./tcejdb\r\n   ./configure --disable-bzip --prefix=<installation prefix> && make && make check\r\n   make install\r\n```\r\n* library name: **tcejdb** (with pkgconfig)\r\n* main include header: ```<tcejdb/ejdb.h>```\r\n\r\nC API\r\n---------------------------------\r\nEJDB API presented in **ejdb.h** C header file.\r\n\r\nJSON processing API: **bson.h**\r\n\r\nQueries\r\n---------------------------------\r\n\r\n```\r\n/**\r\n * Create query object.\r\n * Sucessfully created queries must be destroyed with ejdbquerydel().\r\n *\r\n * EJDB queries inspired by MongoDB (mongodb.org) and follows same philosophy.\r\n *\r\n *  - Supported queries:\r\n *      - Simple matching of String OR Number OR Array value:\r\n *          -   {'json.field.path' : 'val', ...}\r\n *      - $not Negate operation.\r\n *          -   {'json.field.path' : {'$not' : val}} //Field not equal to val\r\n *          -   {'json.field.path' : {'$not' : {'$begin' : prefix}}} //Field not begins with val\r\n *      - $begin String starts with prefix\r\n *          -   {'json.field.path' : {'$begin' : prefix}}\r\n *      - $gt, $gte (>, >=) and $lt, $lte for number types:\r\n *          -   {'json.field.path' : {'$gt' : number}, ...}\r\n *      - $bt Between for number types:\r\n *          -   {'json.field.path' : {'$bt' : [num1, num2]}}\r\n *      - $in String OR Number OR Array val matches to value in specified array:\r\n *          -   {'json.field.path' : {'$in' : [val1, val2, val3]}}\r\n *      - $nin - Not IN\r\n *      - $strand String tokens OR String array val matches all tokens in specified array:\r\n *          -   {'json.field.path' : {'$strand' : [val1, val2, val3]}}\r\n *      - $stror String tokens OR String array val matches any token in specified array:\r\n *          -   {'json.field.path' : {'$stror' : [val1, val2, val3]}}\r\n *      - $exists Field existence matching:\r\n *          -   {'json.field.path' : {'$exists' : true|false}}\r\n *\r\n *  NOTE: Negate operations: $not and $nin not using indexes\r\n *  so they can be slow in comparison to other matching operations.\r\n *\r\n *  NOTE: Only one index can be used in search query operation.\r\n *\r\n *  QUERY HINTS (specified by `hints` argument):\r\n *      - $max Maximum number in the result set\r\n *      - $skip Number of skipped results in the result set\r\n *      - $orderby Sorting order of query fields.\r\n *          Eg: ORDER BY field1 ASC, field2 DESC\r\n *          hints:    {\r\n *                      \"$orderby\" : {\r\n *                          \"field1\" : 1,\r\n *                          \"field2\" : -1\r\n *                      }\r\n *                    }\r\n *\r\n * Many query examples can be found in `testejdb/t2.c` test case.\r\n *\r\n * @param EJDB database handle.\r\n * @param qobj Main BSON query object.\r\n * @param orqobjs Array of additional OR query objects (joined with OR predicate).\r\n * @param orqobjsnum Number of OR query objects.\r\n * @param hints BSON object with query hints.\r\n * @return On success return query handle. On error returns NULL.\r\n */\r\nEJDB_EXPORT EJQ* ejdbcreatequery(EJDB *jb, bson *qobj, bson *orqobjs, int orqobjsnum, bson *hints);\r\n```\r\n\r\nExamples\r\n------------------------------------\r\nYou can find some code samples in:\r\n\r\n* tcejdb/samples\r\n* tcejdb/testejdb\r\n\r\nBasic EJDB architecture\r\n-------------------------------\r\n**EJDB database files structure**\r\n\r\n```\r\n.\r\n├── <dbname>\r\n├── <dbname>_<collection1>\r\n├── ...\r\n├── <dbname>_<collectionN>\r\n└── <dbname>_<collectionN>_<fieldpath>.<index ext>\r\n```\r\n\r\nWhere\r\n\r\n* ```<dbname>``` - name of database. It is metadata DB.\r\n* ```<collectionN>``` - name of collection. Collection database.\r\n* ```<fieldpath>``` - JSON field path used in index\r\n* ```<index ext>``` - Collection index extension:\r\n    * ```.lex``` String index\r\n    * ```.dec``` Number index\r\n    * ```.tok``` Array index\r\n\r\nLimitations/TODOs\r\n------------------------------------\r\n* Case insensitive string indexes\r\n* Collect collection index statistic\r\n* Windows port\r\n\r\n","google":"UA-36241306-1","note":"Don't delete this file! It's used internally to help with page regeneration."}