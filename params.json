{"name":"EJDB","tagline":"Embedded JSON Database engine","body":"EJDB aims to be a fast [MongoDB](http://mongodb.org)-like library which can be embedded into C/C++, .Net, NodeJS, Python, Lua, Java, Ruby, Go applications under terms of LGPL license.\r\n-------------------------------------------------\r\n\r\nEJDB is the C library based on modified version of [Tokyo Cabinet](http://fallabs.com/tokyocabinet/).\r\nJSON representation of queries and data implemented with API based on [C BSON](https://github.com/mongodb/mongo-c-driver/tree/master/src/)\r\n\r\nNews\r\n===============================\r\n* `2013-09-20` **[EJDB Matlab binding from Kota Yamaguchi] (https://github.com/kyamagu/matlab-ejdb)**\r\n* `2013-09-10` **[v1.1.24 Fixed incorrect $set behaviour] (https://github.com/Softmotions/ejdb/wiki/V1.1.24)**\r\n* `2013-08-19` **[v1.1.19 Added support the long awaited mongodb update positional operator] (https://github.com/Softmotions/ejdb/wiki/V1.1.19)**\r\n* `2013-08-11` **[v1.1.18 Added support for mongodb $ projection] (https://github.com/Softmotions/ejdb/wiki/V1.1.18)**\r\n* `2013-08-08` **[v1.1.17 Now supported $and & $or mongodb operators] (https://github.com/Softmotions/ejdb/issues/81)**\r\n* `2013-07-15` **[Google Go binding] (https://github.com/mkilling/goejdb)**\r\n* `2013-06-23` **[C# .Net binding] (https://github.com/Softmotions/ejdb-csharp)**\r\n* `2013-06-02` **[Adobe Air Native Extension (ANE) for EJDB (Thanks to @thejustinwalsh)] (https://github.com/thejustinwalsh/airejdb)**\r\n* `2013-05-29` **[EJDB Python 2.7.x binding available](https://github.com/Softmotions/ejdb-python)**\r\n* `2013-05-06` **[Ruby binding available](https://github.com/Softmotions/ejdb-ruby)**\r\n* `2013-05-02` **[NodeJS win32 module available](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md#ejdb-nodejs-module-installation)**\r\n* `2013-04-25` **[EJDB and TokyoCabinet API ported to Windows](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md)**\r\n* `2013-04-03` **[Java API binding available](https://github.com/Softmotions/ejdb-java)**\r\n* `2013-03-20` **[Lua binding available](https://github.com/Softmotions/ejdb-lua/)**\r\n* `2013-02-15` **[EJDB Python3 binding available](https://github.com/Softmotions/ejdb-python)**\r\n* `2013-02-07` **[Debian packages provided](https://github.com/Softmotions/ejdb/wiki/Debian-Ubuntu-installation)**\r\n* `2013-01-22` **[Collection joins now supported](https://github.com/Softmotions/ejdb/wiki/Collection-joins)**\r\n\r\nFeatures\r\n================================\r\n* LGPL license allows you to embed this library into proprietary software.\r\n* [EJDB and TokyoCabinet API ported to Windows](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md)\r\n* MongoDB-like queries and overall philosophy.\r\n* [Collection joins](https://github.com/Softmotions/ejdb/wiki/Collection-joins)\r\n* Collection level write locking.\r\n* Collection level transactions.\r\n* Node.js/Python/Lua/Java/Ruby/.Net/Go bindings\r\n* [Adobe Air Native Extension (ANE) for EJDB] (https://github.com/thejustinwalsh/airejdb)\r\n* [Pike language binding] (https://github.com/hww3/pike_modules-ejdb)\r\n\r\nDocumentation\r\n================================\r\n\r\n* **[The brief intro to the EJDB](http://blog.abigopal.com/post/51616277039/ejdb)**\r\n* **[EJDB Command line interface](https://github.com/Softmotions/ejdb/wiki/EJDB-Command-line-interface)**\r\n* **[EJDB C Library](#ejdb-c-library)**\r\n    * [Building & Installation](#building--installation)\r\n    * [Samples](#ejdb-c-samples)\r\n    * [C API](#c-api)\r\n* **[Data Import/Export](https://github.com/Softmotions/ejdb/wiki/Data-Import-Export)**\r\n* **[Collection joins](https://github.com/Softmotions/ejdb/wiki/Collection-joins)**\r\n* **[Development FAQ](https://github.com/Softmotions/ejdb/wiki/Development-FAQ)**\r\n* **Bindings**\r\n    * **[C# .Net] (https://github.com/Softmotions/ejdb-csharp)**\r\n    * **[NodeJS] (https://github.com/Softmotions/ejdb-node)**\r\n    * **[Python 2.7/3.x](https://github.com/Softmotions/ejdb-python)**\r\n    * **[Lua](https://github.com/Softmotions/ejdb-lua/)**\r\n    * **[Java](https://github.com/Softmotions/ejdb-java)**\r\n    * **[Ruby](https://github.com/Softmotions/ejdb-ruby)**\r\n    * **[Objective-C](https://github.com/johnnyd/EJDBKit)**\r\n    * **[Go](https://github.com/mkilling/goejdb/)**\r\n    * **[Pike language] (https://github.com/hww3/pike_modules-ejdb)**\r\n    * **[Adobe Air] (https://github.com/thejustinwalsh/airejdb)**\r\n    * **[Matlab] (https://github.com/kyamagu/matlab-ejdb)**\r\n\r\n\r\n\r\nCommunity\r\n================================\r\n* **[ejdblab@twitter.com](https://twitter.com/ejdblab)**\r\n* **We use [EJDB Google group](http://groups.google.com/group/ejdb) as our mailing list.**\r\n* [Projects using EJDB](https://github.com/Softmotions/ejdb/wiki/Projects-using-EJDB)\r\n\r\nEJDB NodeJS\r\n=================================\r\n\r\nOne snippet intro\r\n---------------------------------\r\n\r\n```JavaScript\r\nvar EJDB = require(\"ejdb\");\r\n//Open zoo DB\r\nvar jb = EJDB.open(\"zoo\", EJDB.DEFAULT_OPEN_MODE | EJDB.JBOTRUNC);\r\n\r\nvar parrot1 = {\r\n    \"name\" : \"Grenny\",\r\n    \"type\" : \"African Grey\",\r\n    \"male\" : true,\r\n    \"age\" : 1,\r\n    \"birthdate\" : new Date(),\r\n    \"likes\" : [\"green color\", \"night\", \"toys\"],\r\n    \"extra1\" : null\r\n};\r\nvar parrot2 = {\r\n    \"name\" : \"Bounty\",\r\n    \"type\" : \"Cockatoo\",\r\n    \"male\" : false,\r\n    \"age\" : 15,\r\n    \"birthdate\" : new Date(),\r\n    \"likes\" : [\"sugar cane\"]\r\n};\r\n\r\njb.save(\"parrots\", [parrot1, parrot2], function(err, oids) {\r\n    if (err) {\r\n        console.error(err);\r\n        return;\r\n    }\r\n    console.log(\"Grenny OID: \" + parrot1[\"_id\"]);\r\n    console.log(\"Bounty OID: \" + parrot2[\"_id\"]);\r\n\r\n    jb.find(\"parrots\",\r\n            {\"likes\" : \"toys\"},\r\n            {\"$orderby\" : {\"name\" : 1}},\r\n            function(err, cursor, count) {\r\n                if (err) {\r\n                    console.error(err);\r\n                    return;\r\n                }\r\n                console.log(\"Found \" + count + \" parrots\");\r\n                while (cursor.next()) {\r\n                    console.log(cursor.field(\"name\") + \" likes toys!\");\r\n                }\r\n                cursor.close(); //It's not mandatory to close cursor explicitly\r\n                jb.close(); //Close the database\r\n            });\r\n});\r\n```\r\n**[EJDB NodeJS binding page](https://github.com/Softmotions/ejdb-node)**\r\n\r\nEJDB Python\r\n==================================\r\n\r\nOne snippet intro\r\n---------------------------------\r\n\r\n```python\r\nimport pyejdb\r\nfrom datetime import datetime\r\n\r\n#Open database\r\nejdb = pyejdb.EJDB(\"zoo\", pyejdb.DEFAULT_OPEN_MODE | pyejdb.JBOTRUNC)\r\n\r\nparrot1 = {\r\n    \"name\": \"Grenny\",\r\n    \"type\": \"African Grey\",\r\n    \"male\": True,\r\n    \"age\": 1,\r\n    \"birthdate\": datetime.utcnow(),\r\n    \"likes\": [\"green color\", \"night\", \"toys\"],\r\n    \"extra1\": None\r\n}\r\nparrot2 = {\r\n    \"name\": \"Bounty\",\r\n    \"type\": \"Cockatoo\",\r\n    \"male\": False,\r\n    \"age\": 15,\r\n    \"birthdate\": datetime.utcnow(),\r\n    \"likes\": [\"sugar cane\"],\r\n    \"extra1\": None\r\n}\r\nejdb.save(\"parrots2\", parrot1, parrot2)\r\n\r\nwith ejdb.find(\"parrots2\", {\"likes\" : \"toys\"},\r\n          hints={\"$orderby\" : [(\"name\", 1)]}) as cur:\r\n    print(\"found %s parrots\" % len(cur))\r\n    for p in cur:\r\n        print(\"%s likes toys!\" % p[\"name\"])\r\n\r\nejdb.close()\r\n```\r\n**[EJDB Python 2.7/3.x binding page](https://github.com/Softmotions/ejdb-python)**\r\n\r\nEJDB Lua\r\n==================================\r\n\r\nOne snippet intro\r\n---------------------------------\r\n\r\n```lua\r\nlocal ejdb = require(\"ejdb\")\r\nlocal inspect = require(\"ejdb.inspect\")\r\nlocal Q = ejdb.Q\r\n\r\n-- Used modes:\r\n-- 'r' - read\r\n-- 'w' - write\r\n-- 'c' - create db if not exists\r\n-- 't' - truncate existing db\r\nlocal db = ejdb.open(\"zoo\", \"rwct\")\r\n\r\n-- Unordered lua table\r\nlocal parrot1 = {\r\n  name = \"Grenny\",\r\n  type = \"African Grey\",\r\n  male = true,\r\n  age = 1,\r\n  birthhdate = ejdb.toDateNow(),\r\n  likes = { \"green color\", \"night\", \"toys\" },\r\n  extra1 = ejdb.toNull()\r\n}\r\n\r\n-- Preserve order of BSON keys\r\nlocal parrot2 = Q();\r\nparrot2:KV(\"name\", \"Bounty\"):KV(\"type\", \"Cockatoo\"):KV(\"male\", false)\r\nparrot2:KV(\"age\", 15):KV(\"birthdate\",\r\n  ejdb.toDate({ year = 2013, month = 1, day = 1, hour = 0, sec = 1 }))\r\nparrot2:KV(\"likes\", { \"sugar cane\" }):KV(\"extra1\", ejdb.toNull())\r\n\r\n--IF YOU WANT SOME DATA INSPECTIONS:\r\n--print(ejdb.print_bson(parrot2:toBSON()))\r\n--local obj = ejdb.from_bson(parrot2:toBSON())\r\n--print(inspect(obj));\r\n\r\ndb:save(\"parrots2\", parrot1)\r\ndb:save(\"parrots2\", parrot2)\r\n\r\n-- Below two equivalent queries:\r\n-- Q1\r\nlocal res, count, log =\r\ndb:find(\"parrots2\", Q(\"likes\", \"toys\"):OrderBy(\"name asc\", \"age desc\"))\r\nfor i = 1, #res do -- iterate one\r\n  local ob = res:object(i)\r\n  print(\"\" .. ob[\"name\"] .. \" likes toys #1\")\r\nend\r\n\r\n-- Q2\r\nlocal res, count, log =\r\ndb:find(\"parrots2\", Q():F(\"likes\"):Eq(\"toys\"):OrderBy({ name = 1 }, { age = -1 }))\r\nfor i = 1, #res do -- iterate one\r\n  print(\"\" .. res:field(i, \"name\") .. \" likes toys #2\")\r\nend\r\n\r\n-- Second way to iterate\r\nfor vobj, idx in res() do\r\n  print(\"\" .. vobj[\"name\"] .. \" likes toys #3\")\r\nend\r\n\r\ndb:close()\r\n```\r\n**[EJDB Lua binding page](https://github.com/Softmotions/ejdb-lua)**\r\n\r\nEJDB Go\r\n==================================\r\n\r\nOne snippet intro\r\n-----------------------------------\r\n\r\n```go\r\npackage ejdbtutorial\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"github.com/mkilling/goejdb\"\r\n    \"labix.org/v2/mgo/bson\"\r\n    \"os\"\r\n)\r\n\r\nfunc main() {\r\n    // Create a new database file and open it\r\n    jb, err := goejdb.Open(\"addressbook\", JBOWRITER | JBOCREAT | JBOTRUNC)\r\n    if err != nil {\r\n        os.Exit(1)\r\n    }\r\n    // Get or create collection 'contacts'\r\n    coll, _ := jb.CreateColl(\"contacts\", nil)\r\n\r\n    // Insert one record:\r\n    // JSON: {'name' : 'Bruce', 'phone' : '333-222-333', 'age' : 58}\r\n    rec := map[string]interface{} {\"name\" : \"Bruce\", \"phone\" : \"333-222-333\", \"age\" : 58}\r\n    bsrec, _ := bson.Marshal(rec)\r\n    coll.SaveBson(bsrec)\r\n    fmt.Printf(\"\\nSaved Bruce\")\r\n\r\n    // Now execute query\r\n    res, _ := coll.Find(`{\"name\" : {\"$begin\" : \"Bru\"}}`) // Name starts with 'Bru' string\r\n    fmt.Printf(\"\\n\\nRecords found: %d\\n\", len(res))\r\n\r\n    // Now print the result set records\r\n    for _, bs := range res {\r\n        var m map[string]interface{}\r\n        bson.Unmarshal(bs, &m)\r\n        fmt.Println(m)\r\n    }\r\n\r\n    // Close database\r\n    jb.Close()\r\n}\r\n```\r\n**[EJDB Go binding page](https://github.com/mkilling/goejdb)**\r\n\r\n\r\nEJDB Ruby\r\n==================================\r\n\r\nOne snippet intro\r\n---------------------------------\r\n\r\n```Ruby\r\nrequire \"rbejdb\"\r\n\r\n#Open zoo DB\r\njb = EJDB.open(\"zoo\", EJDB::DEFAULT_OPEN_MODE | EJDB::JBOTRUNC)\r\n\r\nparrot1 = {\r\n    \"name\" => \"Grenny\",\r\n    \"type\" => \"African Grey\",\r\n    \"male\" => true,\r\n    \"age\" => 1,\r\n    \"birthdate\" => Time.now,\r\n    \"likes\" => [\"green color\", \"night\", \"toys\"],\r\n    \"extra1\" => nil\r\n}\r\nparrot2 = {\r\n    \"name\" => \"Bounty\",\r\n    \"type\" => \"Cockatoo\",\r\n    \"male\" => false,\r\n    \"age\" => 15,\r\n    \"birthdate\" => Time.now,\r\n    \"likes\" => [\"sugar cane\"],\r\n    \"extra1\" => nil\r\n}\r\n\r\njb.save(\"parrots\", parrot1, parrot2)\r\nputs \"Grenny OID: #{parrot1[\"_id\"]}\"\r\nputs \"Bounty OID: #{parrot2[\"_id\"]}\"\r\n\r\nresults = jb.find(\"parrots\", {\"likes\" => \"toys\"}, {\"$orderby\" => {\"name\" => 1}})\r\n\r\nputs \"Found #{results.count} parrots\"\r\n\r\nresults.each { |res|\r\n  puts \"#{res['name']} likes toys!\"\r\n}\r\n\r\nresults.close #It's not mandatory to close cursor explicitly\r\njb.close #Close the database\r\n\r\n```\r\n**[EJDB Ruby binding page](https://github.com/Softmotions/ejdb-ruby)**\r\n\r\n\r\nEJDB Adobe AIR\r\n==================================\r\n\r\nOne snippet intro\r\n---------------------------------\r\n\r\n```as3\r\n// Open the zoo DB\r\nvar db:EJDBDatabase = EJDB.open(\"zoo\", EJDB.DEFAULT_OPEN_MODE | EJDB.JBOTRUNC) as EJDBDatabase;\r\n\r\nvar parrot1:Object = {\r\n\t\"name\" : \"Grenny\",\r\n\t\"type\" : \"African Grey\",\r\n\t\"male\" : true,\r\n\t\"age\" : 1,\r\n\t\"birthdate\" : new Date(),\r\n\t\"likes\" : [\"green color\", \"night\", \"toys\"],\r\n\t\"extra1\" : null\r\n};\r\nvar parrot2:Object = {\r\n\t\"name\" : \"Bounty\",\r\n\t\"type\" : \"Cockatoo\",\r\n\t\"male\" : false,\r\n\t\"age\" : 15,\r\n\t\"birthdate\" : new Date(),\r\n\t\"likes\" : [\"sugar cane\"]\r\n};\r\n\r\nvar oids:Array = db.save(\"parrots\", [parrot1, parrot2]);\r\ntrace(\"Grenny OID: \" + parrot1._id);\r\ntrace(\"Bounty OID: \" + parrot2._id);\r\n\r\nvar cursor:EJDBCursor = db.find(\"parrots\",\r\n\t{\"likes\" : \"toys\"},\r\n\t[],\r\n\t{\"$orderby\" : {\"name\" : 1}}\r\n);\r\n\r\ntrace(\"Found \" + cursor.length + \" parrots\");\r\nwhile (cursor.next()) {\r\n\ttrace(cursor.field(\"name\") + \" likes toys!\");\r\n}\r\n\r\ncursor.close(); // It IS mandatory to close cursor explicitly to free up resources\r\ndb.close(); // Close the database\r\n```\r\n**[Adobe Air Native Extension (ANE) for EJDB] (https://github.com/thejustinwalsh/airejdb)**\r\n\r\nEJDB C Library\r\n==================================\r\n\r\nOne snippet intro\r\n-----------------------------------\r\n\r\n```C\r\n#include <tcejdb/ejdb.h>\r\n\r\nstatic EJDB *jb;\r\n\r\nint main() {\r\n    jb = ejdbnew();\r\n    if (!ejdbopen(jb, \"addressbook\", JBOWRITER | JBOCREAT | JBOTRUNC)) {\r\n        return 1;\r\n    }\r\n    //Get or create collection 'contacts'\r\n    EJCOLL *coll = ejdbcreatecoll(jb, \"contacts\", NULL);\r\n\r\n    bson bsrec;\r\n    bson_oid_t oid;\r\n\r\n    //Insert one record:\r\n    //JSON: {'name' : 'Bruce', 'phone' : '333-222-333', 'age' : 58}\r\n    bson_init(&bsrec);\r\n    bson_append_string(&bsrec, \"name\", \"Bruce\");\r\n    bson_append_string(&bsrec, \"phone\", \"333-222-333\");\r\n    bson_append_int(&bsrec, \"age\", 58);\r\n    bson_finish(&bsrec);\r\n    //Save BSON\r\n    ejdbsavebson(coll, &bsrec, &oid);\r\n    fprintf(stderr, \"\\nSaved Bruce\");\r\n    bson_destroy(&bsrec);\r\n\r\n    //Now execute query\r\n    //QUERY: {'name' : {'$begin' : 'Bru'}} //Name starts with 'Bru' string\r\n    bson bq1;\r\n    bson_init_as_query(&bq1);\r\n    bson_append_start_object(&bq1, \"name\");\r\n    bson_append_string(&bq1, \"$begin\", \"Bru\");\r\n    bson_append_finish_object(&bq1);\r\n    bson_finish(&bq1);\r\n\r\n    EJQ *q1 = ejdbcreatequery(jb, &bq1, NULL, 0, NULL);\r\n\r\n    uint32_t count;\r\n    TCLIST *res = ejdbqryexecute(coll, q1, &count, 0, NULL);\r\n    fprintf(stderr, \"\\n\\nRecords found: %d\\n\", count);\r\n\r\n    //Now print the result set records\r\n    for (int i = 0; i < TCLISTNUM(res); ++i) {\r\n        void *bsdata = TCLISTVALPTR(res, i);\r\n        bson_print_raw(bsdata, 0);\r\n    }\r\n    fprintf(stderr, \"\\n\");\r\n\r\n    //Dispose result set\r\n    tclistdel(res);\r\n\r\n    //Dispose query\r\n    ejdbquerydel(q1);\r\n    bson_destroy(&bq1);\r\n\r\n    //Close database\r\n    ejdbclose(jb);\r\n    ejdbdel(jb);\r\n    return 0;\r\n}\r\n```\r\n\r\nYou can save this code in `csnippet.c` And build:\r\n\r\n```sh\r\ngcc -std=c99 -Wall -pedantic  -c -o csnippet.o csnippet.c\r\ngcc -o csnippet csnippet.o -ltcejdb\r\n```\r\n\r\nBuilding & Installation\r\n--------------------------------\r\n * [Installation on windows](https://github.com/Softmotions/ejdb/blob/master/tcejdb/WIN32.md)\r\n * [Installation on Debian/Ubuntu](https://github.com/Softmotions/ejdb/wiki/Debian-Ubuntu-installation)\r\n\r\nManual installation\r\n-------------------------------\r\n\r\n### Prerequisites\r\n**System libraries:**\r\n\r\n* gcc\r\n* zlib-dev\r\n\r\n### Build and install\r\n\r\n```sh\r\n   cd ./tcejdb\r\n   ./configure --prefix=<installation prefix> && make && make check\r\n   make install\r\n```\r\n* library name: **tcejdb** (with pkgconfig)\r\n* main include header: ```<tcejdb/ejdb.h>```\r\n\r\nC API\r\n---------------------------------\r\nEJDB API presented in **[ejdb.h](https://github.com/Softmotions/ejdb/blob/master/tcejdb/ejdb.h)** C header file.\r\n\r\nJSON processing API: **[bson.h](https://github.com/Softmotions/ejdb/blob/master/tcejdb/bson.h)**\r\n\r\nQueries\r\n---------------------------------\r\n\r\n~~~~~~\r\n/**\r\n * Create query object.\r\n * Sucessfully created queries must be destroyed with ejdbquerydel().\r\n *\r\n * EJDB queries inspired by MongoDB (mongodb.org) and follows same philosophy.\r\n *\r\n *  - Supported queries:\r\n *      - Simple matching of String OR Number OR Array value:\r\n *          -   {'fpath' : 'val', ...}\r\n *      - $not Negate operation.\r\n *          -   {'fpath' : {'$not' : val}} //Field not equal to val\r\n *          -   {'fpath' : {'$not' : {'$begin' : prefix}}} //Field not begins with val\r\n *      - $begin String starts with prefix\r\n *          -   {'fpath' : {'$begin' : prefix}}\r\n *      - $gt, $gte (>, >=) and $lt, $lte for number types:\r\n *          -   {'fpath' : {'$gt' : number}, ...}\r\n *      - $bt Between for number types:\r\n *          -   {'fpath' : {'$bt' : [num1, num2]}}\r\n *      - $in String OR Number OR Array val matches to value in specified array:\r\n *          -   {'fpath' : {'$in' : [val1, val2, val3]}}\r\n *      - $nin - Not IN\r\n *      - $strand String tokens OR String array val matches all tokens in specified array:\r\n *          -   {'fpath' : {'$strand' : [val1, val2, val3]}}\r\n *      - $stror String tokens OR String array val matches any token in specified array:\r\n *          -   {'fpath' : {'$stror' : [val1, val2, val3]}}\r\n *      - $exists Field existence matching:\r\n *          -   {'fpath' : {'$exists' : true|false}}\r\n *      - $icase Case insensitive string matching:\r\n *          -    {'fpath' : {'$icase' : 'val1'}} //icase matching\r\n *          Ignore case matching with '$in' operation:\r\n *          -    {'name' : {'$icase' : {'$in' : ['tHéâtre - театр', 'heLLo WorlD']}}}\r\n *          For case insensitive matching you can create special index of type: `JBIDXISTR`\r\n *     - $elemMatch The $elemMatch operator matches more than one component within an array element.\r\n *          -  { array: { $elemMatch: { value1 : 1, value2 : { $gt: 1 } } } }\r\n *          Restriction: only one $elemMatch allowed in context of one array field.\r\n *      - $and, $or joining:\r\n *          -   {..., $and : [subq1, subq2, ...] }\r\n *          -   {..., $or  : [subq1, subq2, ...] }\r\n *          Example: {z : 33, $and : [ {$or : [{a : 1}, {b : 2}]}, {$or : [{c : 5}, {d : 7}]} ] }\r\n *\r\n *      - Mongodb $(projection) operator supported. (http://docs.mongodb.org/manual/reference/projection/positional/#proj._S_)\r\n *      - Mongodb positional $ update operator supported. (http://docs.mongodb.org/manual/reference/operator/positional/)\r\n *\r\n *\r\n *  - Queries can be used to update records:\r\n *       $set Field set operation.\r\n *           - {.., '$set' : {'field1' : val1, 'fieldN' : valN}}\r\n *       $upsert Atomic upsert. If matching records are found it will be '$set' operation,\r\n *              otherwise new record will be inserted with fields specified by argment object.\r\n *           - {.., '$upsert' : {'field1' : val1, 'fieldN' : valN}}\r\n *       $inc Increment operation. Only number types are supported.\r\n *           - {.., '$inc' : {'field1' : number, ...,  'field1' : number}\r\n *       $dropall In-place record removal operation.\r\n *           - {.., '$dropall' : true}\r\n *       $addToSet Atomically adds value to the array only if its not in the array already.\r\n *                    If containing array is missing it will be created.\r\n *           - {.., '$addToSet' : {'fpath' : val1, 'fpathN' : valN, ...}}\r\n *       $addToSetAll Batch version if $addToSet\r\n *           - {.., '$addToSetAll' : {'fpath' : [array of values to add], ...}}\r\n *       $pull Atomically removes all occurrences of value from field, if field is an array.\r\n *           - {.., '$pull' : {'fpath' : val1, 'fpathN' : valN, ...}}\r\n *       $pullAll Batch version of $pull\r\n *           - {.., '$pullAll' : {'fpath' : [array of values to remove], ...}}\r\n *\r\n *  NOTE: Negate operations: $not and $nin not using indexes\r\n *  so they can be slow in comparison to other matching operations.\r\n *\r\n *  NOTE: Only one index can be used in search query operation.\r\n *\r\n *  QUERY HINTS (specified by `hints` argument):\r\n *      - $max Maximum number in the result set\r\n *      - $skip Number of skipped results in the result set\r\n *      - $orderby Sorting order of query fields.\r\n *      - $fields Set subset of fetched fields\r\n            If a field presented in $orderby clause it will be forced to include in resulting records.\r\n *          Example:\r\n *          hints:    {\r\n *                      \"$orderby\" : { //ORDER BY field1 ASC, field2 DESC\r\n *                          \"field1\" : 1,\r\n *                          \"field2\" : -1\r\n *                      },\r\n *                      \"$fields\" : { //SELECT ONLY {_id, field1, field2}\r\n *                          \"field1\" : 1,\r\n *                          \"field2\" : 1\r\n *                      }\r\n *                    }\r\n *\r\n * Many query examples can be found in `testejdb/t2.c` test case.\r\n *\r\n * @param EJDB database handle.\r\n * @param qobj Main BSON query object.\r\n * @param orqobjs Array of additional OR query objects (joined with OR predicate).\r\n * @param orqobjsnum Number of OR query objects.\r\n * @param hints BSON object with query hints.\r\n * @return On success return query handle. On error returns NULL.\r\n */\r\nEJDB_EXPORT EJQ* ejdbcreatequery(EJDB *jb, bson *qobj, bson *orqobjs, int orqobjsnum, bson *hints);\r\n~~~~~~\r\n\r\nEJDB C Samples\r\n------------------------------------\r\nYou can find some code samples in:\r\n\r\n* [tcejdb/samples](https://github.com/Softmotions/ejdb/tree/master/tcejdb/samples)\r\n* [tcejdb/testejdb](https://github.com/Softmotions/ejdb/tree/master/tcejdb/testejdb)\r\n\r\nBasic EJDB architecture\r\n------------------------------------\r\n**EJDB database files structure**\r\n\r\n~~~~~~\r\n.\r\n├── <dbname>\r\n├── <dbname>_<collection1>\r\n├── ...\r\n├── <dbname>_<collectionN>\r\n└── <dbname>_<collectionN>_<fieldpath>.<index ext>\r\n~~~~~~\r\n\r\nWhere\r\n\r\n* ```<dbname>``` - name of database. It is metadata DB.\r\n* ```<collectionN>``` - name of collection. Collection database.\r\n* ```<fieldpath>``` - JSON field path used in index\r\n* ```<index ext>``` - Collection index extension:\r\n    * ```.lex``` String index\r\n    * ```.dec``` Number index\r\n    * ```.tok``` Array index\r\n\r\nLimitations\r\n------------------------------------\r\n* One ejdb database can handle up to 1024 collections.\r\n* Indexes for objects in nested arrays currently not supported (#37)\r\n\r\nTODO\r\n------------------------------------\r\n* Collect collection index statistic\r\n","google":"UA-36241306-1","note":"Don't delete this file! It's used internally to help with page regeneration."}